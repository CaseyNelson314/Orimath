<Application x:Class="Orimath.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:vm="clr-namespace:Orimath.ViewModels"
             xmlns:ctrl="clr-namespace:Orimath.Controls"
             xmlns:th="clr-namespace:Orimath.Themes;assembly=Orimath.ViewPlugins"
             StartupUri="MainWindow.xaml"
             Startup="Application_Startup"
             Exit="Application_Exit">
    <Application.Resources>
        <vm:RootViewModel x:Key="rootViewModel" />
        <ctrl:HalfCornerRadiusValueConverter x:Key="HalfCornerRadius" />

        <Style TargetType="{x:Type Button}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="th:ThemeBrush.Theme" Value="{x:Static th:ThemeBrushes.Control}" />
            <Setter Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Background, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Foreground, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="Padding" Value="6,2" />
            <Setter Property="MinWidth" Value="60" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="Bd"
                                CornerRadius="{TemplateBinding ActualHeight, Converter={StaticResource HalfCornerRadius}}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Highlight.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Highlight.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type ToolBarTray}">
            <Setter Property="Background" Value="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
        </Style>
        <Style TargetType="{x:Type ToolBar}">
            <Setter Property="Background" Value="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
        </Style>

        <!-- Menu -->
        <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
            <Setter Property="Height" Value="1" />
            <Setter Property="Margin" Value="0,4,0,4" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border BorderThickness="1" BorderBrush="{Binding Normal.Border, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}">
            <Border Name="Border"
                    Background="Transparent"
                    TextElement.Foreground="{TemplateBinding Foreground}"
                    Padding="{TemplateBinding Padding}">
                <DockPanel>
                    <ContentPresenter DockPanel.Dock="Left"
                                      ContentSource="Icon"
                                      TextElement.FontSize="16" />
                    <ContentPresenter ContentSource="Header"
                                      RecognizesAccessKey="True" />
                </DockPanel>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Hovered.Background, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Hovered.Foreground, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Disabled.Background, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Disabled.Foreground, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}">
            <Grid>
                <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}"
                       AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1,0,1,1"
                            Background="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}"
                            BorderBrush="{Binding Path=Normal.Border, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}"
                            Margin="0,0,8,8">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="4" ShadowDepth="4" Color="#808080" RenderingBias="Quality" Opacity="0.5" />
                        </Border.Effect>
                        <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"
                                        Grid.IsSharedSizeScope="True"
                                        HorizontalAlignment="Stretch" />
                        </ScrollViewer>
                    </Border>
                </Popup>
                <Border x:Name="Border"
                        Background="Transparent"
                        TextElement.Foreground="{TemplateBinding Foreground}"
                        Padding="{TemplateBinding Padding}"
                        BorderThickness="1,0" BorderBrush="{x:Null}">
                    <StackPanel Orientation="Horizontal">
                        <ContentPresenter ContentSource="Icon" />
                        <ContentPresenter VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="True" />
                    </StackPanel>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                    <Setter TargetName="Popup" Property="PopupAnimation" Value="None" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Hovered.Background, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Hovered.Foreground, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                </Trigger>
                <Trigger Property="IsSubmenuOpen" Value="True">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Normal.Foreground, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Disabled.Background, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Disabled.Foreground, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}">
            <Border x:Name="Border"
                    Background="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}"
                    TextElement.Foreground="{Binding Path=Normal.Foreground, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                        <ColumnDefinition Width="13" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                    <Border x:Name="Check" Width="13" Height="13" Visibility="Collapsed" Margin="6,0,6,0"
                            Background="{Binding Path=Highlight.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}">
                        <Path x:Name="CheckMark" Width="7" Height="7" Visibility="Hidden"
                              SnapsToDevicePixels="False" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0"
                              Stroke="{TemplateBinding Foreground}" />
                    </Border>
                    <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="ButtonBase.Command" Value="{x:Null}" />
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                </Trigger>
                <Trigger Property="IsChecked" Value="true">
                    <Setter TargetName="CheckMark" Property="Visibility" Value="Visible" />
                </Trigger>
                <Trigger Property="IsCheckable" Value="true">
                    <Setter TargetName="Check" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Icon" Property="Visibility" Value="Hidden" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Hovered.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Hovered.Foreground, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=Disabled.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=Disabled.Foreground, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}">
            <Border x:Name="Border"
                    Background="{Binding Path=(th:ThemeBrush.Theme).Normal.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                    TextElement.Foreground="{Binding Path=(th:ThemeBrush.Theme).Normal.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Icon" />
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut" />
                        <ColumnDefinition Width="13" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter x:Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon" />
                    <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" />
                    <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right" />
                    <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z"
                          Fill="{Binding Path=(th:ThemeBrush.Theme).Normal.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <Popup x:Name="Popup" Placement="Right" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True"
                           Focusable="False" PopupAnimation="Fade">
                        <Border x:Name="SubmenuBorder"
                            SnapsToDevicePixels="True"
                            BorderThickness="1"
                            Background="{Binding Path=(th:ThemeBrush.Theme).Normal.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            BorderBrush="{Binding Path=(th:ThemeBrush.Theme).Normal.Border, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                            Margin="0,0,8,8">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="4" ShadowDepth="4" Color="#808080" RenderingBias="Quality" Opacity="0.5" />
                            </Border.Effect>
                            <ScrollViewer CanContentScroll="True"
                                          VerticalScrollBarVisibility="Auto">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"
                                            Grid.IsSharedSizeScope="True"
                                            HorizontalAlignment="Stretch" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Grid>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="Icon" Value="{x:Null}">
                    <Setter TargetName="Icon" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="IsHighlighted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter TargetName="Border" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                    <Setter TargetName="Border" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style TargetType="{x:Type MenuItem}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Padding" Value="8,3" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            <Style.Triggers>
                <Trigger Property="Role" Value="TopLevelHeader">
                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                </Trigger>
                <Trigger Property="Role" Value="TopLevelItem">
                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuHeader">
                    <Setter Property="Padding" Value="2,4" />
                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
                </Trigger>
                <Trigger Property="Role" Value="SubmenuItem">
                    <Setter Property="Padding" Value="2,4" />
                    <Setter Property="Template" Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style TargetType="{x:Type Menu}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="th:ThemeBrush.Theme" Value="{x:Static th:ThemeBrushes.Control}" />
            <Setter Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Background, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Foreground, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="Height" Value="26" />
            <Setter Property="FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}" />
            <Setter Property="FontSize" Value="{DynamicResource {x:Static SystemFonts.MenuFontSizeKey}}" />
            <Setter Property="FontStyle" Value="{DynamicResource {x:Static SystemFonts.MenuFontStyleKey}}" />
            <Setter Property="FontWeight" Value="{DynamicResource {x:Static SystemFonts.MenuFontWeightKey}}" />
            <Setter Property="Padding" Value="30,0,138,0" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                Background="{TemplateBinding Background}"
                                SnapsToDevicePixels="True">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!-- Window -->
        <Style TargetType="{x:Type Button}" x:Key="CaptionButton">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Height" Value="26" />
            <Setter Property="Width" Value="46" />
            <Setter Property="IsTabStop" Value="False" />
            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
            <Setter Property="HorizontalContentAlignment" Value="Center" />
            <Setter Property="VerticalContentAlignment" Value="Center" />
            <Setter Property="th:ThemeBrush.Theme" Value="{x:Static th:ThemeBrushes.Control}" />
            <Setter Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Background, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Normal.Foreground, RelativeSource={RelativeSource Self}, Mode=OneWay}" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Name="Bd"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                Padding="{TemplateBinding Padding}"
                                SnapsToDevicePixels="True">
                            <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Hovered.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Highlight.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Highlight.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Bd" Property="Background" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Background, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                                <Setter TargetName="Bd" Property="TextElement.Foreground" Value="{Binding Path=(th:ThemeBrush.Theme).Disabled.Foreground, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="CloseButton" BasedOn="{StaticResource CaptionButton}">
            <Setter Property="th:ThemeBrush.Theme" Value="{x:Static th:ThemeBrushes.CloseButton}" />
        </Style>
        <Style TargetType="{x:Type Button}" x:Key="MenuButton" BasedOn="{StaticResource CaptionButton}">
            <Setter Property="Width" Value="26" />
        </Style>
        <Style TargetType="{x:Type Window}" x:Key="MainWindowStyle">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
            <Setter Property="Foreground" Value="{Binding Path=Normal.Foreground, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}" />
            <Setter Property="BorderBrush" Value="{Binding Path=Normal.Border, Source={x:Static th:ThemeBrushes.Control}, Mode=OneTime}" />
            <Setter Property="WindowChrome.WindowChrome">
                <Setter.Value>
                    <WindowChrome CornerRadius="0"
                                  GlassFrameThickness="1"
                                  ResizeBorderThickness="8"
                                  CaptionHeight="26" />
                </Setter.Value>
            </Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <AdornerDecorator>
                            <Border x:Name="Bd"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="1"
                                    SnapsToDevicePixels="True"
                                    UseLayoutRounding="True">
                                <AdornerDecorator>
                                    <Grid>
                                        <ContentPresenter Content="{TemplateBinding ContentControl.Content}"
                                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                          ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          UseLayoutRounding="{TemplateBinding UseLayoutRounding}" />
                                        <Button Style="{StaticResource MenuButton}"
                                                Command="{x:Static SystemCommands.ShowSystemMenuCommand}"
                                                VerticalAlignment="Top"
                                                HorizontalAlignment="Left">
                                            <Image Source="{TemplateBinding Icon}"
                                                   Width="16" Height="16" />
                                        </Button>
                                        <StackPanel Orientation="Horizontal"
                                                    VerticalAlignment="Top"
                                                    HorizontalAlignment="Right"
                                                    SnapsToDevicePixels="True">
                                            <Button Style="{StaticResource CaptionButton}"
                                                    Command="{x:Static SystemCommands.MinimizeWindowCommand}">
                                                <Path Data="M 0,6.5 L 10,6.5" StrokeThickness="1" Stroke="{Binding (TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                                            </Button>
                                            <Button Name="MaximizeButton"
                                                    Style="{StaticResource CaptionButton}"
                                                    Command="{x:Static SystemCommands.MaximizeWindowCommand}">
                                                <Path Data="M0.5,0.5 L10.5,0.5 10.5,10.5 0.5,10.5 Z" StrokeThickness="1" Stroke="{Binding (TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                                            </Button>
                                            <Button Name="RestoreButton"
                                                    Style="{StaticResource CaptionButton}"
                                                    Command="{x:Static SystemCommands.RestoreWindowCommand}">
                                                <Path Data="M0.5,2.5 L8.5,2.5 8.5,10.5 0.5,10.5 Z M2.5,2.5 L2.5,0.5 10.5,0.5 10.5,8.5 8.5,8.5" StrokeThickness="1" Stroke="{Binding (TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                                            </Button>
                                            <Button Style="{StaticResource CloseButton}"
                                                    Command="{x:Static SystemCommands.CloseWindowCommand}">
                                                <Path Data="M0,0 L10,10 M0,10 L10,0" StrokeThickness="1" Stroke="{Binding (TextElement.Foreground), RelativeSource={RelativeSource Self}}" />
                                            </Button>
                                        </StackPanel>
                                    </Grid>
                                </AdornerDecorator>
                            </Border>
                        </AdornerDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="WindowState" Value="Maximized">
                                <Setter TargetName="Bd" Property="BorderThickness" Value="8" />
                                <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="RestoreButton" Property="Visibility" Value="Visible" />
                            </Trigger>
                            <Trigger Property="WindowState" Value="Normal">
                                <Setter TargetName="Bd" Property="BorderThickness" Value="1" />
                                <Setter TargetName="MaximizeButton" Property="Visibility" Value="Visible" />
                                <Setter TargetName="RestoreButton" Property="Visibility" Value="Collapsed" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
