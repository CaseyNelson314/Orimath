<ctrl:MainWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ctrl="clr-namespace:Orimath.Controls;assembly=Orimath"
        xmlns:vm="clr-namespace:Orimath.ViewModels;assembly=Orimath"
        xmlns:core="clr-namespace:Orimath.Controls;assembly=Orimath.ViewPlugins"
        xmlns:th="clr-namespace:Orimath.Themes;assembly=Orimath.ViewPlugins"
        mc:Ignorable="d"
        Title="Orimath"
        Icon="/icon_ho.ico"
        DataContext="{Binding Workspace, Source={StaticResource rootViewModel}, Mode=OneTime}"
        Width="{Binding Width, Mode=TwoWay}"
        Height="{Binding Height, Mode=TwoWay}"
        Left="{Binding Left, Mode=TwoWay}"
        Top="{Binding Top, Mode=TwoWay}"
        Style="{StaticResource MainWindowStyle}"
        ResizeMode="CanResizeWithGrip"
        SnapsToDevicePixels="True"
        UseLayoutRounding="True"
        ContentRendered="Window_ContentRendered">
    <Window.Resources>
        <ItemsPanelTemplate x:Key="CanvasItemsPanel">
            <Canvas />
        </ItemsPanelTemplate>
        <ItemsPanelTemplate x:Key="GridItemsPanel">
            <Grid />
        </ItemsPanelTemplate>
        <ItemsPanelTemplate x:Key="HorizontalItemsPanel">
            <StackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
        <ctrl:IconImageConverter x:Key="IconImageConverter" />
        <DataTemplate DataType="{x:Type vm:PluginSettingViewModel}">
            <ContentControl Content="{core:Load Uri=/Orimath;component/PluginSettingControl.xaml}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:DoubleSettingItemViewModel}">
            <DockPanel>
                <TextBlock DockPanel.Dock="Top" Text="{Binding Name, Mode=OneTime}" />
                <TextBox DockPanel.Dock="Left" Width="50" Text="{Binding Value, Mode=TwoWay}" />
                <Slider Value="{Binding Value, Mode=TwoWay}"
                        Maximum="{Binding Maximum, Mode=OneTime}"
                        Minimum="{Binding Minimum, Mode=OneTime}"
                        Visibility="{Binding HasRange, Mode=OneTime, Converter={StaticResource BoolVisibleConverter}}" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:Int32SettingItemViewModel}">
            <DockPanel>
                <TextBlock DockPanel.Dock="Top" Text="{Binding Name, Mode=OneTime}" />
                <TextBox DockPanel.Dock="Left" Width="50" Text="{Binding Value, Mode=TwoWay}" />
                <Slider Value="{Binding Value, Mode=TwoWay}"
                        Maximum="{Binding Maximum, Mode=OneTime}"
                        Minimum="{Binding Minimum, Mode=OneTime}"
                        Visibility="{Binding HasRange, Mode=OneTime, Converter={StaticResource BoolVisibleConverter}}" />
            </DockPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:BooleanSettingItemViewModel}">
            <CheckBox Content="{Binding Name, Mode=OneTime}"
                      IsChecked="{Binding Value, Mode=TwoWay}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:StringSettingItemViewModel}">
            <StackPanel Orientation="Vertical">
                <TextBlock Text="{Binding Name, Mode=OneTime}" />
                <TextBox Text="{Binding Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                         MaxLength="{Binding MaxLength, Mode=OneTime}" />
            </StackPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:EnumSettingItemViewModel}">
            <StackPanel Orientation="Vertical">
                <TextBlock Text="{Binding Name, Mode=OneTime}" />
                <ComboBox ItemsSource="{Binding Choices, Mode=OneTime}"
                          SelectedItem="{Binding Value, Mode=TwoWay}" />
            </StackPanel>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingViewModel}">
            <ItemsControl ItemsSource="{Binding Items, Mode=OneTime}" />
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:ParametricEffectDialogViewModel}">
            <ContentControl Content="{core:Load Uri=/Orimath;component/ParametricEffectControl.xaml}" />
        </DataTemplate>
    </Window.Resources>
    <Window.InputBindings>
        <KeyBinding Gesture="Escape" Command="{Binding CloseDialogCommand, Mode=OneTime}" />
    </Window.InputBindings>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" Executed="Window_Close" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" Executed="Window_Maximize" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" Executed="Window_Minimize" />
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}" Executed="Window_Restore" />
        <CommandBinding Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Executed="Window_ShowSystemMenu" />
    </Window.CommandBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Menu Grid.Row="0" ItemsSource="{Binding MenuItems}"
                           IsEnabled="{Binding HasNotDialog.Value}">
            <Menu.ItemContainerStyle>
                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                    <Setter Property="Header" Value="{Binding Name, Mode=OneTime}" />
                    <Setter Property="Icon" Value="{Binding IconStream, Converter={StaticResource IconImageConverter}, Mode=OneTime}" />
                    <Setter Property="Command" Value="{Binding Command, Mode=OneTime}" />
                    <Setter Property="ItemsSource" Value="{Binding Children, Mode=OneTime}" />
                    <Setter Property="InputGestureText" Value="{Binding ShortcutKeyText, Mode=OneTime}" />
                    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                </Style>
            </Menu.ItemContainerStyle>
        </Menu>
        <DockPanel Grid.Row="1" IsEnabled="{Binding HasNotDialog.Value}">
            <ItemsControl DockPanel.Dock="Top"
                          ItemsSource="{Binding TopViewModels, Mode=OneWay}" />
            <ItemsControl DockPanel.Dock="Left"
                          ItemsSource="{Binding SideViewModels, Mode=OneWay}"
                          ItemsPanel="{StaticResource HorizontalItemsPanel}" />
            <ScrollViewer HorizontalScrollBarVisibility="Visible"
                          VerticalScrollBarVisibility="Visible"
                          x:Name="MainScrollViewer">
                <ItemsControl ItemsSource="{Binding MainViewModels, Mode=OneWay}"
                              ItemsPanel="{StaticResource GridItemsPanel}"
                              Background="{Binding Path=Normal.Background, Source={x:Static th:ThemeBrushes.Workspace}, Mode=OneTime}"
                              Width="{Binding ViewSize, Mode=OneWay}"
                              Height="{Binding ViewSize, Mode=OneWay}"
                              VerticalAlignment="Top"
                              HorizontalAlignment="Left" />
            </ScrollViewer>
        </DockPanel>
        <Grid Grid.Row="1" Visibility="{Binding HasDialog.Value, Converter={StaticResource BoolVisibleConverter}}"
              Background="#80000000">
            <ContentControl Content="{Binding Dialog.Value, Mode=OneWay}"
                            IsTabStop="False"
                            Margin="16" />
        </Grid>
    </Grid>
</ctrl:MainWindow>
